// <auto-generated />
using System;
using ITJobProject.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ITJobProject.Data.Migrations
{
    [DbContext(typeof(ITJobDbContext))]
    [Migration("20201120073802_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ITJobProject.Data.Entities.Admin", b =>
                {
                    b.Property<Guid>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("TDNAM");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = new Guid("03f0df99-4d97-4f67-ab65-2a110ba127fc"),
                            AdminName = "Trịnh Đình Nam",
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 551, DateTimeKind.Local).AddTicks(5681),
                            Email = "trinhdinhnam16898@gmail.com",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "123456",
                            Phone = "03095699933"
                        });
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanySize")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("TDNAM");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeBusiness")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("WorkingDay")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = new Guid("851789b8-d0d4-477f-a9ee-1285524c6c46"),
                            Address = "15 Phố Duy Tân, Cầu Giấy, Hà Nội",
                            CompanyName = "Công ty cổ phần MISA",
                            CompanySize = 3000,
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 557, DateTimeKind.Local).AddTicks(4231),
                            Image = "",
                            Introduction = "Công ty cổ phần MISA là công ty phần mềm Product tạo ra những phần mềm có ứng dụng cao cho các ngành nghề",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeBusiness = 2,
                            WorkingDay = "Thứ 2 - Thứ 6"
                        },
                        new
                        {
                            CompanyId = new Guid("79841e3f-b663-413c-ae9e-96998fe07351"),
                            Address = "Tòa Landmark 72, đường Phạm Hùng, Hà Nội",
                            CompanyName = "Tập toàn viễn thông quân đội Viettel",
                            CompanySize = 25000,
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 557, DateTimeKind.Local).AddTicks(5773),
                            Image = "",
                            Introduction = "Tập đoàn lớn nhất khu vực về mạng viễn thông",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeBusiness = 2,
                            WorkingDay = "Thứ 2 - Thứ 6"
                        },
                        new
                        {
                            CompanyId = new Guid("909beffe-385e-4c9d-a162-3e42e4b0f11b"),
                            Address = "Số 1, Phạm Văn Bạch, Cầu Giấy, Hà Nội",
                            CompanyName = "Công ty SamSung",
                            CompanySize = 3000,
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 557, DateTimeKind.Local).AddTicks(5810),
                            Image = "",
                            Introduction = "Công ty SamSung là công ty hàng đầu trong lĩnh vực mạng 4G",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeBusiness = 1,
                            WorkingDay = "Thứ 2 - Thứ 6"
                        });
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.Job", b =>
                {
                    b.Property<Guid>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("TDNAM");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateApply")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Possition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Require")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDateApply")
                        .HasColumnType("datetime2");

                    b.HasKey("JobId");

                    b.HasIndex("AdminId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            JobId = new Guid("8aecaa76-f155-4a15-aa2b-2865c1abaf7a"),
                            Address = "Hà Nội",
                            AdminId = new Guid("9b431290-56d4-4d27-90fa-0af5d36d5ad1"),
                            CompanyId = new Guid("2220a4e6-2b16-4374-9075-035377838136"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 559, DateTimeKind.Local).AddTicks(2577),
                            Description = "Bạn sẽ được đào tạo trong 3 tháng và đánh giá để lên nhân viên chính thức, join vào các dự án thực tế",
                            EndDateApply = new DateTime(2020, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobName = "Thực tập sinh PHP/Laravel",
                            LanguageId = new Guid("9c7e116b-4ca5-45b7-ab0f-0871d1e56f9a"),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Possition = "Thực tập sinh",
                            RecruiterId = new Guid("0f7d54d4-200a-4c83-a246-81117daa016d"),
                            Require = "Yêu cầu thí sinh nắm chắc kiến thức về HTML/CSS, và biết một số framework như Laravel, Magnento càng tốt",
                            Salary = 5000000m,
                            StartDateApply = new DateTime(2020, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = new Guid("f471a6b7-3423-4b34-ba04-474e5a8b3c63"),
                            Address = "Hà Nội",
                            AdminId = new Guid("180f95e0-44a6-4f00-8bf0-8e9c13e3d973"),
                            CompanyId = new Guid("8410f309-206c-49c1-b1a7-e26fda75dbed"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 559, DateTimeKind.Local).AddTicks(3706),
                            Description = "Bạn sẽ được thử việc vào dự án trong 2 tháng và được đánh giá lên nhân viên chính thức",
                            EndDateApply = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobName = "Nhân viên lập trình front-end Angular",
                            LanguageId = new Guid("e1592e33-6b09-4ee5-bba3-ce12d5573f36"),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Possition = "Nhân viên",
                            RecruiterId = new Guid("d965f3bf-2be0-4b47-907a-16009567e8d0"),
                            Require = "Yêu cầu chắc kiến thức về HTML/CSS, nắm rõ kiến thức cơ bản về Angular",
                            Salary = 12000000m,
                            StartDateApply = new DateTime(2020, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = new Guid("90943b5a-9b3b-4906-a6c7-2ddfdd1d4542"),
                            Address = "Đà Nẵng",
                            AdminId = new Guid("2b2e0715-1923-498f-9f85-defbb445444a"),
                            CompanyId = new Guid("7523d615-4b0f-410c-85b6-c3cad6816e4f"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 559, DateTimeKind.Local).AddTicks(3735),
                            Description = "Bạn sẽ giao làm việc trong dự án quản trị doanh nghiệp với một đội nhân viên theo sự chỉ đạo của bạn",
                            EndDateApply = new DateTime(2020, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobName = "Senior Manager dự án quản trị doanh nghiệp",
                            LanguageId = new Guid("4e3f3e01-a7de-4b5e-9796-69592b85ef46"),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Possition = "Senior Manager",
                            RecruiterId = new Guid("82847c41-27b0-4960-87dc-4f618c282c4e"),
                            Require = "Yêu cầu có kinh nghiệm làm việc 2 năm, có khả năng lãnh đạo và tổ chức làm việc teamwork, nhanh nhẹn không ngại vất vả",
                            Salary = 27500000m,
                            StartDateApply = new DateTime(2020, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = new Guid("bff35643-ffaf-4104-a0ff-f00214379c84"),
                            Address = "TP Hồ Chí Minh",
                            AdminId = new Guid("1b9bfeb3-1876-410d-8c33-22d657b70e32"),
                            CompanyId = new Guid("eaf4fd93-e1e4-4d03-b4fc-9e042df1f052"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 559, DateTimeKind.Local).AddTicks(3746),
                            Description = "Bạn sẽ làm việc trong một nhóm Java nhỏ, nhanh nhẹn cùng với các chuyên gia Java khác và cùng chúng tôi xây dựng kiến ​​trúc microservices. Phát triển và phát triển tài năng thông qua các chiến lược cố vấn, huấn luyện và giữ chân nhân tài quan trọng trong môi trường kinh tế tăng trưởng nhanh,cạnh tranh cao.",
                            EndDateApply = new DateTime(2020, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobName = "Junior Software Engineer ",
                            LanguageId = new Guid("ea75fd9b-cd81-46f5-93b5-a00dc255013d"),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Possition = "Junior",
                            RecruiterId = new Guid("9063438f-fd61-4010-859a-5e8f7c4c39c8"),
                            Require = "Yêu cầu đã làm qua các dự án về Java, và có khả năng làm việc nhóm",
                            Salary = 25000000m,
                            StartDateApply = new DateTime(2020, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("TDNAM");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = new Guid("c09cd8e1-2fd5-45e3-90b8-539bdc580f96"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 555, DateTimeKind.Local).AddTicks(1626),
                            Description = "Ngôn ngữ lập trình .NET core",
                            LanguageName = "C#/.NET",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            LanguageId = new Guid("30983d40-6137-4230-8f54-dad02a3faa94"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 555, DateTimeKind.Local).AddTicks(3270),
                            Description = "Ngôn ngữ lập trình Java web",
                            LanguageName = "JAVA",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            LanguageId = new Guid("5c6cd1d7-784b-4d5e-ac8a-a2a10914d501"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 555, DateTimeKind.Local).AddTicks(3304),
                            Description = "Ngôn ngữ lập trình Php",
                            LanguageName = "PHP",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            LanguageId = new Guid("f04dcda0-6877-47d7-8032-0620a09c7c9d"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 555, DateTimeKind.Local).AddTicks(3309),
                            Description = "Ngôn ngữ lập trình C/C++",
                            LanguageName = "C/C++",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            LanguageId = new Guid("2d8faf22-ddeb-4225-9a07-d1a16703dc43"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 555, DateTimeKind.Local).AddTicks(3326),
                            Description = "Ngôn ngữ lập trình Adroid",
                            LanguageName = "Android",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            LanguageId = new Guid("8ec487c3-a472-4053-a447-21769efce82f"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 555, DateTimeKind.Local).AddTicks(3330),
                            Description = "Ngôn ngữ lập trình Python",
                            LanguageName = "Python",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            LanguageId = new Guid("0415b5e7-99c2-4e39-b245-869ad07cccc7"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 555, DateTimeKind.Local).AddTicks(3334),
                            Description = "Ngôn ngữ lập trình front-end Angular",
                            LanguageName = "Angular",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.Recruiter", b =>
                {
                    b.Property<Guid>("RecruiterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("TDNAM");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecruiterLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecruiterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecruiterId");

                    b.HasIndex("RecruiterLevelId");

                    b.ToTable("Recruiters");

                    b.HasData(
                        new
                        {
                            RecruiterId = new Guid("80270ca1-2383-4863-ab75-e5adea08a004"),
                            Address = "Số 3 Nguyễn Khang, Cầu Giấy",
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 558, DateTimeKind.Local).AddTicks(3268),
                            DateOfBirth = new DateTime(1997, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tuan123@gmail.com",
                            Gender = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "123445",
                            Phone = "04984842444",
                            RecruiterLevelId = new Guid("00f5eff7-382a-4207-9566-ceab30643968"),
                            RecruiterName = "Hoàng Văn Tuấn"
                        },
                        new
                        {
                            RecruiterId = new Guid("f7c0bf76-cdfa-4929-ba17-adca7fe45d30"),
                            Address = "ngõ 67, Yên Hòa, Cầu Giấy",
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 558, DateTimeKind.Local).AddTicks(5012),
                            DateOfBirth = new DateTime(1998, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoang123@gmail.com",
                            Gender = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "123123",
                            Phone = "03828484844",
                            RecruiterLevelId = new Guid("3ae43694-1f97-432d-a73f-9afaca81933a"),
                            RecruiterName = "Lưu Văn Hoàng"
                        },
                        new
                        {
                            RecruiterId = new Guid("9316f1d8-b533-4299-9b30-6b992e09d5d2"),
                            Address = "số 37, Trương Định, Hai Bà Trưng, Hà Nội",
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 558, DateTimeKind.Local).AddTicks(5048),
                            DateOfBirth = new DateTime(1996, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trang3323@gmail.com",
                            Gender = 1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "323442",
                            Phone = "094838848353",
                            RecruiterLevelId = new Guid("97f1e119-5959-4443-9190-c3b5e76b8ff4"),
                            RecruiterName = "Lê Thị Trang"
                        });
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.RecruiterLevel", b =>
                {
                    b.Property<Guid>("RecruiterLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("TDNAM");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RecruiterLevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecruiterLevelId");

                    b.ToTable("RecruiterLevels");

                    b.HasData(
                        new
                        {
                            RecruiterLevelId = new Guid("ab156ed6-ee57-4f67-aa4f-0123493a3856"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 555, DateTimeKind.Local).AddTicks(7480),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostNumber = 100,
                            Price = 4500000m,
                            RecruiterLevelName = "Vip 1"
                        },
                        new
                        {
                            RecruiterLevelId = new Guid("41d07fa3-31d3-4d9a-b207-e184758b48d1"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 555, DateTimeKind.Local).AddTicks(9015),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostNumber = 80,
                            Price = 3600000m,
                            RecruiterLevelName = "Vip 2"
                        },
                        new
                        {
                            RecruiterLevelId = new Guid("ac4cc259-e36f-46c8-8717-fbf371119849"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 555, DateTimeKind.Local).AddTicks(9068),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostNumber = 60,
                            Price = 2700000m,
                            RecruiterLevelName = "Vip 3"
                        },
                        new
                        {
                            RecruiterLevelId = new Guid("f2af217b-6676-40e0-8947-34b5fbef5444"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 555, DateTimeKind.Local).AddTicks(9074),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostNumber = 30,
                            Price = 1200000m,
                            RecruiterLevelName = "Normal"
                        });
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.Seeker", b =>
                {
                    b.Property<Guid>("SeekerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("TDNAM");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeekerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeekerId");

                    b.ToTable("Seekers");

                    b.HasData(
                        new
                        {
                            SeekerId = new Guid("166d3d22-c2b5-4ec1-b2aa-d5f1aa0ad49f"),
                            Address = "Thường Tín, Hà Nội",
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 556, DateTimeKind.Local).AddTicks(5869),
                            DateOfBirth = new DateTime(1998, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sang123@gmail.com",
                            Gender = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "162661",
                            Phone = "03949394932",
                            SeekerName = "Phạm Minh Sang"
                        },
                        new
                        {
                            SeekerId = new Guid("3b92438b-3f6e-47e6-b599-6739c62a208c"),
                            Address = "Yên Hòa, Cầu Giấy, Hà Nội",
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 556, DateTimeKind.Local).AddTicks(7663),
                            DateOfBirth = new DateTime(1998, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hunghp@gmail.com",
                            Gender = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "174777",
                            Phone = "09493848844",
                            SeekerName = "Hoàng Phi Hùng"
                        },
                        new
                        {
                            SeekerId = new Guid("6a3d0283-9cc4-460b-a0a3-f20c1ed3afbb"),
                            Address = "Tạ Quang Bửu, Hai Bà Trưng, Hà Nội",
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 556, DateTimeKind.Local).AddTicks(7701),
                            DateOfBirth = new DateTime(1997, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trang123@gmail.com",
                            Gender = 1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "838834",
                            Phone = "07483884835",
                            SeekerName = "Lê Thị Thùy Trang"
                        });
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.SeekerJob", b =>
                {
                    b.Property<Guid>("SeekerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CVLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("TDNAM");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("SeekerId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("SeekerJobs");

                    b.HasData(
                        new
                        {
                            SeekerId = new Guid("3bdd468a-71aa-417c-a8c0-3550b6b16563"),
                            JobId = new Guid("8b6cb7ed-8d21-4409-89e9-32ac5e738196"),
                            ApplyDate = new DateTime(2020, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 559, DateTimeKind.Local).AddTicks(6588),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            SeekerId = new Guid("b5a62d5c-f51f-4f06-a7ee-0d9d75864a80"),
                            JobId = new Guid("9c5516a5-1aa6-4e7a-a5ee-f19de9092809"),
                            ApplyDate = new DateTime(2020, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 559, DateTimeKind.Local).AddTicks(7582),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            SeekerId = new Guid("15485aec-dfde-4399-98fc-052e25145662"),
                            JobId = new Guid("b074a111-2b3a-472d-837a-fbf4e135c929"),
                            ApplyDate = new DateTime(2020, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 559, DateTimeKind.Local).AddTicks(7604),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            SeekerId = new Guid("cfd55f4e-9039-4f5e-abe3-5b118c19c38e"),
                            JobId = new Guid("2d5b68f7-8a8f-427a-b736-ed8945f5a33f"),
                            ApplyDate = new DateTime(2020, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 559, DateTimeKind.Local).AddTicks(7608),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            SeekerId = new Guid("b72cbfc1-04d1-4328-afa1-f3a4792276ed"),
                            JobId = new Guid("bade0d2d-a8ac-467e-abf3-0ef0efa53356"),
                            ApplyDate = new DateTime(2020, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 14, 38, 1, 559, DateTimeKind.Local).AddTicks(7617),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        });
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.Job", b =>
                {
                    b.HasOne("ITJobProject.Data.Entities.Admin", "Admin")
                        .WithMany("Jobs")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITJobProject.Data.Entities.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITJobProject.Data.Entities.Language", "Language")
                        .WithMany("Jobs")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITJobProject.Data.Entities.Recruiter", "Recruiter")
                        .WithMany("Jobs")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.Recruiter", b =>
                {
                    b.HasOne("ITJobProject.Data.Entities.RecruiterLevel", "RecruiterLevel")
                        .WithMany("Recruiters")
                        .HasForeignKey("RecruiterLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.SeekerJob", b =>
                {
                    b.HasOne("ITJobProject.Data.Entities.Job", "Job")
                        .WithMany("SeekerJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITJobProject.Data.Entities.Seeker", "Seeker")
                        .WithMany("SeekerJobs")
                        .HasForeignKey("SeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
