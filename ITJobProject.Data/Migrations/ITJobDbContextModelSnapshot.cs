// <auto-generated />
using System;
using ITJobProject.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ITJobProject.Data.Migrations
{
    [DbContext(typeof(ITJobDbContext))]
    partial class ITJobDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ITJobProject.Data.Entities.Admin", b =>
                {
                    b.Property<Guid>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("TDNAM");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = new Guid("f4da7d18-9bb9-48c8-9d0e-b9f7677b23b6"),
                            AdminName = "Trịnh Đình Nam",
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 379, DateTimeKind.Local).AddTicks(1973),
                            Email = "trinhdinhnam16898@gmail.com",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "AQAAAAEAACcQAAAAEPQW1RQ3Z10wfUgue0ZvVrF7VHv07Kqdsh/Omt8RRdXiSSExUs/PKIUsndV87pnugg==",
                            Phone = "03095699933"
                        });
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanySize")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("TDNAM");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeBusiness")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("WorkingDay")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = new Guid("0928c58a-6350-4f68-bf1d-8b2b4a62aa11"),
                            Address = "15 Phố Duy Tân, Cầu Giấy, Hà Nội",
                            CompanyName = "Công ty cổ phần MISA",
                            CompanySize = 3000,
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 428, DateTimeKind.Local).AddTicks(1591),
                            Image = "",
                            Introduction = "Công ty cổ phần MISA là công ty phần mềm Product tạo ra những phần mềm có ứng dụng cao cho các ngành nghề",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeBusiness = 2,
                            WorkingDay = "Thứ 2 - Thứ 6"
                        },
                        new
                        {
                            CompanyId = new Guid("fc13b568-07ba-4a7e-b895-6bfb8ac85972"),
                            Address = "Tòa Landmark 72, đường Phạm Hùng, Hà Nội",
                            CompanyName = "Tập toàn viễn thông quân đội Viettel",
                            CompanySize = 25000,
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 428, DateTimeKind.Local).AddTicks(4286),
                            Image = "",
                            Introduction = "Tập đoàn lớn nhất khu vực về mạng viễn thông",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeBusiness = 2,
                            WorkingDay = "Thứ 2 - Thứ 6"
                        },
                        new
                        {
                            CompanyId = new Guid("5b3ab6c5-8657-4a06-8e06-6dc0ef35c056"),
                            Address = "Số 1, Phạm Văn Bạch, Cầu Giấy, Hà Nội",
                            CompanyName = "Công ty SamSung",
                            CompanySize = 3000,
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 428, DateTimeKind.Local).AddTicks(4340),
                            Image = "",
                            Introduction = "Công ty SamSung là công ty hàng đầu trong lĩnh vực mạng 4G",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeBusiness = 1,
                            WorkingDay = "Thứ 2 - Thứ 6"
                        });
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.Job", b =>
                {
                    b.Property<Guid>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("TDNAM");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateApply")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Possition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Require")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDateApply")
                        .HasColumnType("datetime2");

                    b.HasKey("JobId");

                    b.HasIndex("AdminId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            JobId = new Guid("ad26e545-ae22-4165-9960-07300bc256c7"),
                            Address = "Hà Nội",
                            AdminId = new Guid("f1cad49e-ecd2-4de1-9423-30366235aa2a"),
                            CompanyId = new Guid("8e3cac57-be1e-4e99-9879-789012f2dd55"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 457, DateTimeKind.Local).AddTicks(8316),
                            Description = "Bạn sẽ được đào tạo trong 3 tháng và đánh giá để lên nhân viên chính thức, join vào các dự án thực tế",
                            EndDateApply = new DateTime(2020, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobName = "Thực tập sinh PHP/Laravel",
                            LanguageId = new Guid("0f6f91dc-2192-4f6c-bfdc-e56c231da08f"),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Possition = "Thực tập sinh",
                            RecruiterId = new Guid("66a1dcbe-6d73-4f39-88cf-b36960e8e0ea"),
                            Require = "Yêu cầu thí sinh nắm chắc kiến thức về HTML/CSS, và biết một số framework như Laravel, Magnento càng tốt",
                            Salary = 5000000m,
                            StartDateApply = new DateTime(2020, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = new Guid("c45ddca9-f340-4979-9cbf-05bd869fd4f6"),
                            Address = "Hà Nội",
                            AdminId = new Guid("9dab7e89-fc40-4a20-926c-848983a88a2d"),
                            CompanyId = new Guid("05721e13-dfef-43e5-bd8b-909af7244ec9"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 457, DateTimeKind.Local).AddTicks(9507),
                            Description = "Bạn sẽ được thử việc vào dự án trong 2 tháng và được đánh giá lên nhân viên chính thức",
                            EndDateApply = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobName = "Nhân viên lập trình front-end Angular",
                            LanguageId = new Guid("68382661-3465-463c-b4a6-fb17156849f9"),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Possition = "Nhân viên",
                            RecruiterId = new Guid("0f5b89bb-58d6-49c1-9fd5-735dd0ce0ab6"),
                            Require = "Yêu cầu chắc kiến thức về HTML/CSS, nắm rõ kiến thức cơ bản về Angular",
                            Salary = 12000000m,
                            StartDateApply = new DateTime(2020, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = new Guid("3688c22d-6ca8-4664-9d80-c0e504d73686"),
                            Address = "Đà Nẵng",
                            AdminId = new Guid("83f0be1e-c388-4656-bb9a-0b72b221102f"),
                            CompanyId = new Guid("d7553cfa-fd64-4842-9ffe-5222b9aace6c"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 457, DateTimeKind.Local).AddTicks(9546),
                            Description = "Bạn sẽ giao làm việc trong dự án quản trị doanh nghiệp với một đội nhân viên theo sự chỉ đạo của bạn",
                            EndDateApply = new DateTime(2020, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobName = "Senior Manager dự án quản trị doanh nghiệp",
                            LanguageId = new Guid("18488a1e-b8d3-4237-ab33-c42fabf6f1b9"),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Possition = "Senior Manager",
                            RecruiterId = new Guid("f2fff13a-e852-4492-b5bf-ba454c825ad2"),
                            Require = "Yêu cầu có kinh nghiệm làm việc 2 năm, có khả năng lãnh đạo và tổ chức làm việc teamwork, nhanh nhẹn không ngại vất vả",
                            Salary = 27500000m,
                            StartDateApply = new DateTime(2020, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobId = new Guid("e9847e13-ca10-4ed1-ba61-7ef3da379af3"),
                            Address = "TP Hồ Chí Minh",
                            AdminId = new Guid("490230f4-f097-4d1c-9c17-2b85acf9b3ed"),
                            CompanyId = new Guid("c8d15088-c12e-4e28-b54e-7ce0db865e61"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 457, DateTimeKind.Local).AddTicks(9558),
                            Description = "Bạn sẽ làm việc trong một nhóm Java nhỏ, nhanh nhẹn cùng với các chuyên gia Java khác và cùng chúng tôi xây dựng kiến ​​trúc microservices. Phát triển và phát triển tài năng thông qua các chiến lược cố vấn, huấn luyện và giữ chân nhân tài quan trọng trong môi trường kinh tế tăng trưởng nhanh,cạnh tranh cao.",
                            EndDateApply = new DateTime(2020, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobName = "Junior Software Engineer ",
                            LanguageId = new Guid("4e1a61f6-d657-4883-836f-46862d251159"),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Possition = "Junior",
                            RecruiterId = new Guid("9dfed6aa-e4bd-4215-9add-ad5ed900737f"),
                            Require = "Yêu cầu đã làm qua các dự án về Java, và có khả năng làm việc nhóm",
                            Salary = 25000000m,
                            StartDateApply = new DateTime(2020, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("TDNAM");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = new Guid("7d7278e8-563b-48cf-901f-a5c743af44e2"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 383, DateTimeKind.Local).AddTicks(7825),
                            Description = "Ngôn ngữ lập trình .NET core",
                            LanguageName = "C#/.NET",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            LanguageId = new Guid("d6adb7cc-88b7-4beb-8ea0-3735dcd900df"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 384, DateTimeKind.Local).AddTicks(388),
                            Description = "Ngôn ngữ lập trình Java web",
                            LanguageName = "JAVA",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            LanguageId = new Guid("3bc82578-df61-4684-8426-7a769e3d35d4"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 384, DateTimeKind.Local).AddTicks(463),
                            Description = "Ngôn ngữ lập trình Php",
                            LanguageName = "PHP",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            LanguageId = new Guid("3d97efa7-3b9f-439f-932b-2d7a6a483927"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 384, DateTimeKind.Local).AddTicks(472),
                            Description = "Ngôn ngữ lập trình C/C++",
                            LanguageName = "C/C++",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            LanguageId = new Guid("c921fda9-fad7-4b9d-b1de-eefa636b2594"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 384, DateTimeKind.Local).AddTicks(478),
                            Description = "Ngôn ngữ lập trình Adroid",
                            LanguageName = "Android",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            LanguageId = new Guid("765dc1f8-418f-46b1-8f85-d63cf5fe0b96"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 384, DateTimeKind.Local).AddTicks(511),
                            Description = "Ngôn ngữ lập trình Python",
                            LanguageName = "Python",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            LanguageId = new Guid("c3ca9b15-f288-4dbb-b84d-99c60f1e7236"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 384, DateTimeKind.Local).AddTicks(519),
                            Description = "Ngôn ngữ lập trình front-end Angular",
                            LanguageName = "Angular",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.Recruiter", b =>
                {
                    b.Property<Guid>("RecruiterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("TDNAM");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecruiterLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecruiterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecruiterId");

                    b.HasIndex("RecruiterLevelId");

                    b.ToTable("Recruiters");

                    b.HasData(
                        new
                        {
                            RecruiterId = new Guid("05f3ca97-de4b-4679-b163-9e020cbada99"),
                            Address = "Số 3 Nguyễn Khang, Cầu Giấy",
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 439, DateTimeKind.Local).AddTicks(1076),
                            DateOfBirth = new DateTime(1997, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tuan123@gmail.com",
                            Gender = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "AQAAAAEAACcQAAAAEC2FbTUz4dMOfsxzDizgPCnl63+hYO6IB4+kv1r6UE0C6upYTszUNgsqEGOhjL2HXA==",
                            Phone = "04984842444",
                            RecruiterLevelId = new Guid("721f80ac-2e66-4ade-aae6-57c6e9b14e86"),
                            RecruiterName = "Hoàng Văn Tuấn"
                        },
                        new
                        {
                            RecruiterId = new Guid("0d963c79-1644-4c4e-9001-eb638aea9952"),
                            Address = "ngõ 67, Yên Hòa, Cầu Giấy",
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 449, DateTimeKind.Local).AddTicks(324),
                            DateOfBirth = new DateTime(1998, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoang123@gmail.com",
                            Gender = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "AQAAAAEAACcQAAAAEIgfNKqiKGlMDlT3Fu1/UrzkmsvYRWhu0Pl8CeKc8IpZR+2tGDuIvGhkKlqP+tjNQA==",
                            Phone = "03828484844",
                            RecruiterLevelId = new Guid("36957963-cb9d-4820-9d24-1b159965eb42"),
                            RecruiterName = "Lưu Văn Hoàng"
                        },
                        new
                        {
                            RecruiterId = new Guid("8fb0d1b5-f785-422f-bd2f-fd53aa99e831"),
                            Address = "số 37, Trương Định, Hai Bà Trưng, Hà Nội",
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 456, DateTimeKind.Local).AddTicks(8893),
                            DateOfBirth = new DateTime(1996, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trang3323@gmail.com",
                            Gender = 1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "AQAAAAEAACcQAAAAENc5wiyX+gD9F3IQHSI0w1xHLeQeC2kd41sC16AzaNewSKnJaJA/XqalkqFthuIoXg==",
                            Phone = "094838848353",
                            RecruiterLevelId = new Guid("80cfc0ba-d8c6-4e7a-833c-f87ea64aaf17"),
                            RecruiterName = "Lê Thị Trang"
                        });
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.RecruiterLevel", b =>
                {
                    b.Property<Guid>("RecruiterLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("TDNAM");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RecruiterLevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecruiterLevelId");

                    b.ToTable("RecruiterLevels");

                    b.HasData(
                        new
                        {
                            RecruiterLevelId = new Guid("6529192a-b9b0-4412-af8b-f3a70e943858"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 384, DateTimeKind.Local).AddTicks(5874),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostNumber = 100,
                            Price = 4500000m,
                            RecruiterLevelName = "Vip 1"
                        },
                        new
                        {
                            RecruiterLevelId = new Guid("5ed34b73-5ab5-4219-a0e6-105982381766"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 384, DateTimeKind.Local).AddTicks(7719),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostNumber = 80,
                            Price = 3600000m,
                            RecruiterLevelName = "Vip 2"
                        },
                        new
                        {
                            RecruiterLevelId = new Guid("0919f67d-57ad-4e0c-99ab-7dc03719a83c"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 384, DateTimeKind.Local).AddTicks(7800),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostNumber = 60,
                            Price = 2700000m,
                            RecruiterLevelName = "Vip 3"
                        },
                        new
                        {
                            RecruiterLevelId = new Guid("b07212ec-a9d0-44a6-b7e9-4e7dd64f7987"),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 384, DateTimeKind.Local).AddTicks(7808),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostNumber = 30,
                            Price = 1200000m,
                            RecruiterLevelName = "Normal"
                        });
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.Seeker", b =>
                {
                    b.Property<Guid>("SeekerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("TDNAM");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeekerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeekerId");

                    b.ToTable("Seekers");

                    b.HasData(
                        new
                        {
                            SeekerId = new Guid("fb50024e-a1fe-424e-976f-c51c0f498e8e"),
                            Address = "Thường Tín, Hà Nội",
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 397, DateTimeKind.Local).AddTicks(345),
                            DateOfBirth = new DateTime(1998, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sang123@gmail.com",
                            Gender = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "AQAAAAEAACcQAAAAEMTl0ls+Q83SFvgYUVkPcLrm8asIVCcSVY2TxJRe8X3lRvGNSXbr+cUAEQrH62pOfg==",
                            Phone = "03949394932",
                            SeekerName = "Phạm Minh Sang"
                        },
                        new
                        {
                            SeekerId = new Guid("57ee117b-92ab-441f-b637-6a7923321f1c"),
                            Address = "Yên Hòa, Cầu Giấy, Hà Nội",
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 410, DateTimeKind.Local).AddTicks(1102),
                            DateOfBirth = new DateTime(1998, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hunghp@gmail.com",
                            Gender = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "AQAAAAEAACcQAAAAEH7PSLXQQj/jAB/x1jRGE18zKjTewhkOeOS1BKZOxMOLAG01G1fQXe0IKkspn9ykIA==",
                            Phone = "09493848844",
                            SeekerName = "Hoàng Phi Hùng"
                        },
                        new
                        {
                            SeekerId = new Guid("a4bd7842-f5f7-4469-80d9-e44b9bcd086b"),
                            Address = "Tạ Quang Bửu, Hai Bà Trưng, Hà Nội",
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 426, DateTimeKind.Local).AddTicks(9004),
                            DateOfBirth = new DateTime(1997, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trang123@gmail.com",
                            Gender = 1,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "AQAAAAEAACcQAAAAELHFoDDB9Y6Ob43gwS+hYd5zNurvMrBf4kNJ4ahHhz/LFZhli213xChzC3qp0wkZlA==",
                            Phone = "07483884835",
                            SeekerName = "Lê Thị Thùy Trang"
                        });
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.SeekerJob", b =>
                {
                    b.Property<Guid>("SeekerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CVLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("TDNAM");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("SeekerId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("SeekerJobs");

                    b.HasData(
                        new
                        {
                            SeekerId = new Guid("7693cde4-7952-40c5-9044-0a15f4e70a58"),
                            JobId = new Guid("7c774ad0-4cad-4786-b5d9-2aaad3024a4b"),
                            ApplyDate = new DateTime(2020, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 458, DateTimeKind.Local).AddTicks(2774),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            SeekerId = new Guid("6ea70177-abcd-459f-8c24-718432178328"),
                            JobId = new Guid("168b0380-efaf-4d2d-829b-3006d3eecd45"),
                            ApplyDate = new DateTime(2020, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 458, DateTimeKind.Local).AddTicks(3805),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            SeekerId = new Guid("e8a710f1-4416-4b07-8cbc-25d9788d7e99"),
                            JobId = new Guid("02e7da9c-85cc-4110-9f99-742d24de4b8c"),
                            ApplyDate = new DateTime(2020, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 458, DateTimeKind.Local).AddTicks(3830),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            SeekerId = new Guid("db121340-0dc8-43c1-8606-f15515dbf771"),
                            JobId = new Guid("43456674-37ab-4d50-8549-b886d23bf2c7"),
                            ApplyDate = new DateTime(2020, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 458, DateTimeKind.Local).AddTicks(3843),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        },
                        new
                        {
                            SeekerId = new Guid("db61181e-aef5-4014-b963-1ba6b59442bb"),
                            JobId = new Guid("4b85b246-b2fa-45de-b8c1-1d17556df0b0"),
                            ApplyDate = new DateTime(2020, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "TDNAM",
                            CreatedDate = new DateTime(2020, 11, 20, 16, 14, 30, 458, DateTimeKind.Local).AddTicks(3847),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        });
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.Job", b =>
                {
                    b.HasOne("ITJobProject.Data.Entities.Admin", "Admin")
                        .WithMany("Jobs")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITJobProject.Data.Entities.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITJobProject.Data.Entities.Language", "Language")
                        .WithMany("Jobs")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITJobProject.Data.Entities.Recruiter", "Recruiter")
                        .WithMany("Jobs")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.Recruiter", b =>
                {
                    b.HasOne("ITJobProject.Data.Entities.RecruiterLevel", "RecruiterLevel")
                        .WithMany("Recruiters")
                        .HasForeignKey("RecruiterLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITJobProject.Data.Entities.SeekerJob", b =>
                {
                    b.HasOne("ITJobProject.Data.Entities.Job", "Job")
                        .WithMany("SeekerJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITJobProject.Data.Entities.Seeker", "Seeker")
                        .WithMany("SeekerJobs")
                        .HasForeignKey("SeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
